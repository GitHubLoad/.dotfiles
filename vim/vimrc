" The folding settings above make the {{{ and }}} sections fold up.
" vim:foldmethod=marker:foldlevel=0

set nocompatible

" PLUGINS {{{1
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'ap/vim-buftabline'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'                                                            " :Gbrowse
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-ragtag'                                                             " eRuby <% %> <%= %> ...
Plug 'jiangmiao/auto-pairs'
Plug 'mileszs/ack.vim'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }
Plug 'jgdavey/tslime.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'blueyed/vim-diminactive' | Plug 'tmux-plugins/vim-tmux-focus-events'          " focus window
Plug 'tweekmonster/startuptime.vim'                                                 " profiling vim startup
Plug 'slim-template/vim-slim', { 'for': 'slim' }
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'posva/vim-vue', {'for': 'vue'}                                                " Vim syntax highlighting for Vue components.
Plug 'pangloss/vim-javascript', { 'for': 'js' }
Plug 'alvan/vim-closetag', { 'for': ['html', 'javascript.jsx'] }
Plug 'lifepillar/vim-colortemplate'

" Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
" Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Slowly plugins
Plug 'powerman/vim-plugin-ruscmd', { 'for': 'markdown' }
Plug 'mg979/vim-visual-multi'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'                                " Git wrapper
Plug 'scrooloose/nerdtree'  | Plug 'tiagofumo/vim-nerdtree-syntax-highlight' | Plug 'ryanoasis/vim-devicons'
" Colors {{{2
Plug 'artanikin/sexy-railscasts-256-theme'
Plug 'lucasprag/simpleblack'
Plug 'cocopon/iceberg.vim'
Plug 'axvr/photon.vim'
Plug 'owickstrom/vim-colors-paramount'
Plug 'davidosomething/vim-colors-meh'
Plug 'lifepillar/vim-gruvbox8'
" Plug 'arcticicestudio/nord-vim'
" Plug 'chriskempson/base16-vim' | Plug 'mike-hearn/base16-vim-lightline'
" Plug 'patstockwell/vim-monokai-tasty'
" Plug 'mhartington/oceanic-next'
" Plug 'fenetikm/falcon'
" Plug 'dracula/vim'
" Plug 'jonathanfilip/vim-lucius'
" Plug 'artanikin/bclear'
" Plug 'mhinz/vim-janah'
" Plug 'ajmwagar/vim-deus'
" Plug 'shapeoflambda/dark-purple.vim'
" Plug 'cormacrelf/vim-colors-github'
" }}}

call plug#end()
" }}}
" OPTIONS {{{1
" Settings to replace tab. Use :retab for replacing tab in existing files.
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Other general vim options:
set showmatch
set ignorecase
set incsearch
set nopaste
set number
set relativenumber
set undolevels=1000
set cursorline
set history=200
set showcmd                                 " Show entered command
set pastetoggle=<F10>                       " Toggle PASTE mode
set autowrite                               " Autosave closed buffers
set splitbelow                              " Open new split panes to bottom
set splitright                              " Open new split panes to right
set scrolloff=7                             " Minimal number of screen lines to keep above and below the cursor
set hidden                                  " Allow buffer change w/o saving
set lazyredraw                              " Don't update while executing macros
set shell=/bin/zsh
set colorcolumn=0
set termguicolors
" set synmaxcol=159                         " Only highlight the first 159 columns.
set signcolumn=yes                          " Always show signcolumns

set list
set listchars=tab:»·,trail:∙
set fillchars=fold:·,diff:-,vert:│

set hlsearch
set incsearch
set ignorecase
set smartcase

set clipboard=unnamed,unnamedplus            " Copy into system (*, +) registers.

" Backupds
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"more characters will be sent to the screen for redrawing
set ttyfast
"time waited for key press(es) to complete. It makes for a faster key response
set ttimeout
set ttimeoutlen=50
"make backspace behave properly in insert mode
set backspace=indent,eol,start
"a better menu in command mode
set wildmenu
set wildmode=longest:full,full
"hide buffers instead of closing them even if they contain unwritten changes
set hidden

"remove current line highlight in unfocused window
au VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * set cul
au WinLeave,FocusLost,CmdwinLeave * set nocul
"
"remove trailing whitespace on save
autocmd! BufWritePre * :%s/\s\+$//e

" Timeout when switching modes
set timeoutlen=1000
set ttimeoutlen=0

set tags+=.git/tags

if has('folding')
  if has('windows')
    set fillchars=vert:│
    set fillchars+=fold:·
  endif
  set foldmethod=syntax
  set foldlevelstart=99
endif
" }}}
" MAPPINGS {{{1
nnoremap <silent> <Space> :nohl<Bar>:echo<CR>
nnoremap n nzz
nnoremap N Nzz

nmap 0 ^

" Leader Shortcuts
let mapleader=','
nnoremap <leader>ev :e ~/.vimrc<cr>
nnoremap <leader>el :e ~/.vimrc.local<cr>
nnoremap <leader>eg :e $MYGVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <silent> <leader>sh :terminal<cr>
nnoremap <leader>w :w<cr>
"replace the word under cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//<left>
"move lines around
nnoremap <leader>k :m-2<cr>==
nnoremap <leader>j :m+<cr>==
xnoremap <leader>k :m-2<cr>gv=gv
xnoremap <leader>j :m'>+<cr>gv=gv
"keep text selected after indentation
vnoremap < <gv
vnoremap > >gv
"Ctags
set tags+=.git/tags
nnoremap <leader>ct :!ctags --tag-relative --extra=+f -Rf .git/tags --exclude=.git,pkg --languages=-javascript,sql<cr><cr>

nnoremap j gj
nnoremap k gk
nnoremap Y y$

" switch between panels
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Buffers
nnoremap <tab> :bnext<CR>
nnoremap <S-tab> :bprevious<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
noremap  <leader>d :Bd<CR>
noremap  <leader>D :bufdo bd<CR>
command! Bd :bp | :sp | :bn | :bd  " Close buffer without closing window

" Switch between last two buffers
nnoremap <leader><leader> <c-^>

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>
" }}}
" AUTOCOMMANDS {{{1
if has("autocmd")
  " Have Vim jump to the last position when reopening a file
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Guardfile,config.ru,*.axlsx,*.jb} set filetype=ruby
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set filetype=markdown
  au BufRead,BufNewFile *.json set filetype=javascript
  au BufRead,BufNewFile *.{yaml,yml} set filetype=yaml
  au BufRead,BufNewFile Brewfile set filetype=sh

  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et
  autocmd FileType javascript,html,eruby,sass,vue setlocal ts=4 sts=4 sw=4 et
endif

augroup VimScript
  autocmd!
  if has("gui_running")
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC
  else
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
  endif
augroup END

augroup ColorColumnOnlyInInsertMode
  autocmd!
  autocmd InsertEnter * let &colorcolumn="159,".join(range(159,999),",")
  autocmd BufRead,BufNewFile,InsertLeave * setlocal colorcolumn=0
augroup END

augroup rails_shortcuts
  autocmd!
  autocmd User Rails nnoremap <Leader>m :Emodel<Space>
  autocmd User Rails nnoremap <Leader>c :Econtroller<Space>
  autocmd User Rails nnoremap <Leader>v :Eview<Space>
augroup END

" Vim AND Tmux Balancing
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Redraw screen every time when focus gained
au FocusGained * :redraw!
" }}}
" ABBREVIATIONS {{{1
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Q! q!
cnoreabbrev Qa qa
cnoreabbrev Ц w
cnoreabbrev Цй wq
" }}}
" PLUGIN OPTIONS {{{1
" NERDTree {{{2
let NERDTreeWinPos="left"
let NERDTreeHijackNetrw=1
let NERDTreeChDirMode=2
let NERDTreeDirArrows=1
let g:NERDTreeQuitOnOpen=1                                          " close after a file is opened
let NERDTreeShowHidden=0                                            " show hidden files in NERDTree
let g:NERDTreeWinSize=50
let NERDTreeAutoDeleteBuffer=1                                      " delete buffer when rename or delete file
let NERDTreeMinimalUI = 1
let NERDTreeShowBookmarks = 1                                       " Display bookmarks on startup
let NERDTreeAutoDeleteBuffer = 1                                    " Close open buffer if delete file from context NERDTree menu

nmap <silent> <leader>q :NERDTreeToggle<cr>                         " toggle NERDTree
nmap <silent> <leader>y :NERDTreeFind<cr>                           " expand to the path of the file in the current buffer

" NERDTree syntax highlight {{{3
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFoldersFullName = 1

let s:blue = "689FB6"
let s:git_orange = 'F54D27'

let g:NERDTreeExactMatchHighlightColor = {}                         " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

let g:NERDTreeExtensionHighlightColor = {}                          " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['yml'] = s:blue               " sets the color for .gitignore files
" }}}
" }}}
" LightLine {{{2
let g:lightline = {
      \ 'colorscheme': 'deus',
      \   'active': {
      \     'left':[ [ 'mode', 'paste' ],
      \              [ 'gitbranch', 'git', 'readonly', 'filename', 'modified' ]
      \     ],
      \   },
      \   'inactive': {
      \     'left': [ [ 'filename' ] ],
      \     'right': [ [ 'lineinfo' ], [ 'percent' ] ]
      \   },
      \   'component_function': {
      \     'gitbranch': 'LightlineFugitive',
      \     'readonly': 'LightlineReadonly',
      \     'filename': 'LightlineFilename',
      \     'filetype': 'MyFiletype',
      \     'fileformat': 'MyFileformat',
      \   },
      \   'component': {
      \     'lineinfo': ' %3l:%-2v',
      \   },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
  if exists('*fugitive#head')
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() . ' ' : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
" }}}
" Silver Searcher {{{2
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
  nnoremap \| :Ag<space>
  nnoremap <leader>ga :Ag <c-r><c-w><cr>
endif
" }}}
" Ruby-motion (:help ruby-motion) {{{2
let g:ruby_indent_access_modifier_style = 'normal'
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'
" }}}
" Vim-RSpec {{{2
" let g:rspec_command = "clear && spring rspec {spec}"
" let g:rspec_command = "clear && rspec {spec}"
" let g:rspec_runner = "os_x_iterm2"
let g:rspec_command = 'call Send_to_Tmux("spring rspec {spec}\n")'

map <leader>f :call RunCurrentSpecFile()<CR>
map <leader>s :call RunNearestSpec()<CR>
map <leader>l :call RunLastSpec()<CR>
map <leader>a :call RunAllSpecs()<CR>
" }}}
" FZF (Replace for Ctrl-P) {{{2
let g:fzf_files_options =
  \ '--reverse ' .
  \ '--preview "(coderay {} || bat --color \"always\" --line-range 0:30 {}) 2> /dev/null | head -'.&lines.'"'
let $FZF_DEFAULT_COMMAND = 'ag -l --nogroup --nocolor -g "" --hidden'
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

let g:fzf_layout = { 'down': '~50%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%', '?'),
  \                 <bang>0)

command! -bang Colors
  \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

nnoremap <C-p> :Files<cr>
nnoremap <leader>b :Buffers<CR>
nnoremap <Leader>t :Tags<CR>
nnoremap <leader>o :Lines<cr>

nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>
nnoremap <leader>gw :Files app/javascript/<cr>

let branch_files_options = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD master) ) | sort | uniq'}
let uncommited_files_options = { 'source': '( git status --porcelain | awk ''{print $2}'' ) | sort | uniq'}

let s:diff_options =
  \ '--reverse ' .
  \ '--preview "(git diff --color=always master -- {} | tail -n +5 || bat {}) 2> /dev/null | head -'.&lines.'"'
command! BranchFiles call fzf#run(fzf#wrap('BranchFiles', extend(branch_files_options, { 'options': s:diff_options }), 0))
command! UncommitedFiles call fzf#run(fzf#wrap('UncommitedFiles', extend(uncommited_files_options, { 'options': s:diff_options }), 0))

nnoremap <silent> <leader>gp :BranchFiles<cr>
nnoremap <silent> <leader>GP :UncommitedFiles<cr>
nnoremap <silent> <leader>gb :Gblame<cr>
" }}}
" UltiSnips {{{2
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" }}}
" vim-buftabline {{{2
let g:buftabline_show = 1                                   " Show buffers if > 2 buffers open
let g:buftabline_numbers = 2                                " Show buff numeber
let g:buftabline_indicators = 1                             " Indicate if buffers change
let g:buftabline_separators = 1

" Switch between buffers
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)
"}}}
" vim-vue {{{2
autocmd FileType vue syntax sync fromstart
let g:vue_disable_pre_processors=1
" }}}
" vim-javascript {{{2
augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax
augroup END
" }}}
" auto-paird {{{2
let g:AutoPairsMultilineClose = 0
" }}}
" vim-signify {{{2
autocmd User Fugitive SignifyRefresh
let g:signify_vcs_list = ['git']
let g:signify_realtime = 0
" }}}
" }}}

syntax on
filetype on
filetype indent on
filetype plugin indent on
runtime macros/matchit.vim

set t_Co=256

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

" Highlight customization {{{
 hi Comment gui=italic cterm=italic
 hi htmlArg gui=italic cterm=italic
 hi Folded gui=italic cterm=italic
 hi String gui=italic cterm=italic

" hi rubyBlockParameter gui=italic cterm=italic
" hi rubyClass gui=italic cterm=italic
" hi rubyDefine gui=italic cterm=italic
" hi rubyFunction gui=italic cterm=italic

highlight DiffAdd    term=bold ctermfg=0 ctermbg=2 guifg=#2b2b2b guibg=#a5c261
highlight DiffDelete term=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2b2b2b guibg=#da4939
highlight DiffChange term=bold ctermfg=0 ctermbg=4 guifg=#2b2b2b guibg=#6d9cbe
highlight DiffText   term=reverse cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#2b2b2b guibg=#6d9cbe
" }}}
