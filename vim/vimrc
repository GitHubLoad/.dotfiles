" The folding settings above make the {{{ and }}} sections fold up.
" vim:foldmethod=marker:foldlevel=0

set nocompatible

" PLUGINS {{{1
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'ap/vim-buftabline'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'                                                            " :Gbrowse
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-ragtag'                                                             " eRuby <% %> <%= %> ...
Plug 'tpope/vim-fugitive'                                                           " Git wrapper
Plug 'cocopon/vaffle.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mileszs/ack.vim'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }
Plug 'jgdavey/tslime.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'blueyed/vim-diminactive' | Plug 'tmux-plugins/vim-tmux-focus-events'          " focus window
Plug 'tweekmonster/startuptime.vim'                                                 " profiling vim startup
Plug 'slim-template/vim-slim', { 'for': 'slim' }
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'posva/vim-vue', {'for': 'vue'}                                                " Vim syntax highlighting for Vue components.
Plug 'pangloss/vim-javascript', { 'for': 'js' }
Plug 'alvan/vim-closetag', { 'for': ['html', 'javascript.jsx'] }
Plug 'lifepillar/vim-colortemplate'
Plug 'segeljakt/vim-silicon'
Plug 'machakann/vim-highlightedyank'
Plug 'andrewradev/splitjoin.vim'
Plug 'andrewradev/switch.vim'
Plug 'AndrewRadev/tagalong.vim'
Plug 'mhinz/vim-startify'
" Plug 'Yggdroot/indentLine'
Plug 'wellle/targets.vim'

" Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'liuchengxu/vista.vim'
Plug 'Shougo/echodoc.vim'

" Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
" Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Slowly plugins
Plug 'powerman/vim-plugin-ruscmd', { 'for': 'markdown' }
Plug 'mg979/vim-visual-multi'
" Plug 'scrooloose/nerdtree' | Plug 'tiagofumo/vim-nerdtree-syntax-highlight' | Plug 'ryanoasis/vim-devicons' | Plug 'Xuyuanp/nerdtree-git-plugin'

" Colors {{{2
Plug 'artanikin/sexy-railscasts-256-theme'
Plug 'huyvohcmc/atlas.vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'liuchengxu/space-vim-theme'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'mhartington/oceanic-next'
Plug 'Lokaltog/vim-monotone'
Plug 'fxn/vim-monochrome'
Plug 'davidosomething/vim-colors-meh'
Plug 'lifepillar/vim-gruvbox8'
Plug 'mhinz/vim-janah'
Plug 'agreco/vim-citylights'
Plug 'tomasiser/vim-code-dark'
" Plug 'AlessandroYorba/Sierra'
" Plug 'Rigellute/rigel'
" Plug 'marcopaganini/termschool-vim-theme'
" Plug 'ajmwagar/vim-deus'
" Plug 'artanikin/vim-synthwave84'
" Plug 'lucasprag/simpleblack'
" Plug 'cocopon/iceberg.vim'
" }}}

call plug#end()
" }}}
" OPTIONS {{{1
" Settings to replace tab. Use :retab for replacing tab in existing files.
set tabstop=4
set shiftwidth=2
set softtabstop=2
set expandtab

" Other general vim options:
set showmatch
set ignorecase
set incsearch
set nopaste
set number
set relativenumber
set undolevels=1000
set cursorline
set history=200
set showcmd                                 " Show entered command
set pastetoggle=<F10>                       " Toggle PASTE mode
set autowrite                               " Autosave closed buffers
set splitbelow                              " Open new split panes to bottom
set splitright                              " Open new split panes to right
set scrolloff=3                             " Minimal number of screen lines to keep above and below the cursor
set sidescrolloff=5
set hidden                                  " Allow buffer change w/o saving
set lazyredraw                              " Don't update while executing macros
set shell=/bin/zsh
set colorcolumn=0
set termguicolors
" set synmaxcol=159                         " Only highlight the first 159 columns.
set signcolumn=yes                          " Always show signcolumns
set mouse=a
set autoindent
set encoding=utf-8
set linebreak
set exrc                                    " enable project specific vimrc
set fileformat=unix

set list
set listchars=tab:»·,trail:∙
set fillchars=fold:·,diff:-,vert:│

set hlsearch
set incsearch
set ignorecase
set smartcase

set clipboard=unnamed,unnamedplus            " Copy into system (*, +) registers.

" Undo
set undofile                                 " Maintain undo history between sessions
set undodir=~/.vim/undodir,~/.tmp,~/tmp,/var/tmp,/tmp

" Backupds
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"more characters will be sent to the screen for redrawing
set ttyfast
"time waited for key press(es) to complete. It makes for a faster key response
set ttimeout
set ttimeoutlen=50
"make backspace behave properly in insert mode
set backspace=indent,eol,start
"a better menu in command mode
set wildmenu
" set wildmode=list:longest,full
set wildoptions=pum
"hide buffers instead of closing them even if they contain unwritten changes
set hidden
set pumblend=10

set statusline=
set statusline+=%<%f\ %h%m%r             " filename and flags
set statusline+=%{fugitive#statusline()} " git info
set statusline+=%=                       " alignment separator
set statusline+=[%{&ft}]                 " filetype
set statusline+=%-14.([%l/%L],%c%V%)     " cursor info

"	To enable mode shapes, "Cursor" highlight, and blinking: >
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175

"remove current line highlight in unfocused window
au VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * call FocusOn()
au WinLeave,FocusLost,CmdwinLeave * call FocusOff()

function FocusOn()
  set cursorline
  " let g:indentLine_enabled = 1
  " normal! :IndentLineEnable<cr>
endfunction

function FocusOff()
  set nocursorline
  " let g:indentLine_enabled = 0
  " normal! :IndentLineDisable<cr>
endfunction
"

" highlight trailing whitespace
" match ErrorMsg '\s\+$'
"remove trailing whitespace on save
autocmd! BufWritePre * :%s/\s\+$//e

" Timeout when switching modes
set timeoutlen=1000
set ttimeoutlen=0

set tags+=.git/tags

if has('folding')
  if has('windows')
    set fillchars=vert:│
    set fillchars+=fold:·
  endif
  set foldenable
  set foldlevelstart=99
  set foldnestmax=10
  set foldmethod=syntax

  let ruby_fold=1
  let javaScript_fold=1
endif

" Clearly diff look
set diffopt+=internal,indent-heuristic
" }}}
" MAPPINGS {{{1
nnoremap <silent> <Space> :nohl<Bar>:echo<CR>
nnoremap n nzz
nnoremap N Nzz

nmap 0 ^

" Leader Shortcuts
let mapleader=','
nnoremap <leader>ev :e ~/.vimrc<cr>
nnoremap <leader>el :e ~/.vimrc.local<cr>
nnoremap <leader>eg :e $MYGVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <silent> <leader>sh :terminal<cr>
nnoremap <leader>w :w<cr>
"replace the word under cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//<left>
"move lines around
nnoremap <leader>k :m-2<cr>==
nnoremap <leader>j :m+<cr>==
xnoremap <leader>k :m-2<cr>gv=gv
xnoremap <leader>j :m'>+<cr>gv=gv
"keep text selected after indentation
vnoremap < <gv
vnoremap > >gv
vnoremap . :normal.<cr>

" Move visual selection
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv

"Ctags
set tags+=.git/tags
nnoremap <leader>ct :!ctags --tag-relative --extra=+f -Rf .git/tags --exclude=.git,pkg --languages=-javascript,sql<cr><cr>

nnoremap j gj
nnoremap k gk
nnoremap Y y$

" switch between panels
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Switch between last two buffers
nnoremap <leader><leader> <c-^>

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>
" }}}
" AUTOCOMMANDS {{{1
if has("autocmd")
  " Have Vim jump to the last position when reopening a file
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Guardfile,config.ru,*.axlsx,*.jb} set filetype=ruby
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set filetype=markdown
  au BufRead,BufNewFile *.json set filetype=javascript
  au BufRead,BufNewFile *.{yaml,yml} set filetype=yaml
  au BufRead,BufNewFile Brewfile set filetype=sh

  autocmd FileType ruby,javascript,vue setlocal ts=2 sts=2 sw=2 et
  autocmd FileType html,eruby,sass setlocal ts=4 sts=4 sw=4 et
endif

augroup VimScript
  autocmd!
  if has("gui_running")
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC
  else
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
  endif
augroup END

augroup ColorColumnOnlyInInsertMode
  autocmd!
  autocmd InsertEnter * let &colorcolumn="159,".join(range(159,999),",")
  autocmd BufRead,BufNewFile,InsertLeave * setlocal colorcolumn=0
augroup END

" Vim AND Tmux Balancing
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Redraw screen every time when focus gained
au FocusGained * :redraw!

augroup toggle_relative_number
  autocmd InsertEnter * :setlocal norelativenumber
  autocmd InsertLeave * :setlocal relativenumber
augroup END
" }}}
" ABBREVIATIONS {{{1
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Q! q!
cnoreabbrev Qa qa
cnoreabbrev Ц w
cnoreabbrev Цй wq
" }}}
" PLUGIN OPTIONS {{{1
" NERDTree {{{2
let NERDTreeWinPos="left"
let NERDTreeHijackNetrw=1
let NERDTreeChDirMode=2
let NERDTreeDirArrows=1
let g:NERDTreeQuitOnOpen=1                                          " close after a file is opened
let NERDTreeShowHidden=0                                            " show hidden files in NERDTree
let g:NERDTreeWinSize=50
let NERDTreeAutoDeleteBuffer=1                                      " delete buffer when rename or delete file
let NERDTreeMinimalUI = 1
let NERDTreeShowBookmarks = 1                                       " Display bookmarks on startup
let NERDTreeAutoDeleteBuffer = 1                                    " Close open buffer if delete file from context NERDTree menu
let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "✹",
      \ "Staged"    : "✚",
      \ "Untracked" : "✭",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "═",
      \ "Deleted"   : "✖",
      \ "Dirty"     : "✗",
      \ "Clean"     : "✔︎",
      \ "Unknown"   : "?"
      \ }

nmap <silent> <leader>q :NERDTreeToggle<cr>                         " toggle NERDTree
nmap <silent> <leader>y :NERDTreeFind<cr>                           " expand to the path of the file in the current buffer

let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1

" NERDTree syntax highlight {{{3
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFoldersFullName = 1

let s:blue = "689FB6"
let s:git_orange = 'F54D27'

let g:NERDTreeExactMatchHighlightColor = {}                         " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

let g:NERDTreeExtensionHighlightColor = {}                          " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['yml'] = s:blue               " sets the color for .gitignore files
" let NERDTreeWinPo="left"
" let NERDTreeHijackNetrw=1
" let NERDTreeChDirMode=2
" let NERDTreeDirArrows=1
" let g:NERDTreeQuitOnOpen=1                                          " close after a file is opened
" let NERDTreeShowHidden=0                                            " show hidden files in NERDTree
" let g:NERDTreeWinSize=50
" let NERDTreeAutoDeleteBuffer=1                                      " delete buffer when rename or delete file
" let NERDTreeMinimalUI = 1
" let NERDTreeShowBookmarks = 1                                       " Display bookmarks on startup
" let NERDTreeAutoDeleteBuffer = 1                                    " Close open buffer if delete file from context NERDTree menu
" let g:NERDTreeIndicatorMapCustom = {
"       \ "Modified"  : "✹",
"       \ "Staged"    : "✚",
"       \ "Untracked" : "✭",
"       \ "Renamed"   : "➜",
"       \ "Unmerged"  : "═",
"       \ "Deleted"   : "✖",
"       \ "Dirty"     : "✗",
"       \ "Clean"     : "✔︎",
"       \ "Unknown"   : "?"
"       \ }

" nmap <silent> <leader>q :NERDTreeToggle<cr>                         " toggle NERDTree
" nmap <silent> <leader>y :NERDTreeFind<cr>                           " expand to the path of the file in the current buffer

" let g:WebDevIconsOS = 'Darwin'
" let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" let g:DevIconsEnableFoldersOpenClose = 1
" let g:DevIconsEnableFolderExtensionPatternMatching = 1

" " NERDTree syntax highlight {{{3
" let g:NERDTreeFileExtensionHighlightFullName = 1
" let g:NERDTreeExactMatchHighlightFullName = 1
" let g:NERDTreePatternMatchHighlightFullName = 1
" let g:NERDTreeHighlightFoldersFullName = 1

" let s:blue = "689FB6"
" let s:git_orange = 'F54D27'

" let g:NERDTreeExactMatchHighlightColor = {}                         " this line is needed to avoid error
" let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

" let g:NERDTreeExtensionHighlightColor = {}                          " this line is needed to avoid error
" let g:NERDTreeExtensionHighlightColor['yml'] = s:blue               " sets the color for .gitignore files
" }}}
" }}}
" LightLine {{{2
let g:lightline = {
      \ 'colorscheme': 'Tomorrow_Night_Bright',
      \   'active': {
      \     'left': [
      \              ['mode', 'paste'],
      \              ['gitbranch', 'git', 'readonly', 'filename', 'modified']
      \     ],
      \     'right': [
      \       ['filetype', 'fileencoding', 'lineinfo', 'percent'],
      \       ['blame'],
      \     ],
      \   },
      \   'inactive': {
      \     'left': [ [ 'filename' ] ],
      \     'right': [ [ 'lineinfo' ], [ 'percent' ] ]
      \   },
      \   'component_function': {
      \     'gitbranch': 'LightlineFugitive',
      \     'readonly': 'LightlineReadonly',
      \     'filename': 'LightlineFilename',
      \     'filetype': 'MyFiletype',
      \     'fileformat': 'MyFileformat',
      \     'blame': 'LightlineGitBlame',
      \   },
      \   'component': {
      \     'lineinfo': ' %3l:%-2v',
      \   },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineGitBlame() abort
  let blame = get(b:, 'coc_git_blame', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
  if exists('*fugitive#head')
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() . ' ' : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
" }}}
" Silver Searcher {{{2
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
  nnoremap \| :Ag<space>
  nnoremap <leader>ga :Ag <c-r><c-w><cr>
endif
" }}}
" Ruby-motion (:help ruby-motion) {{{2
let g:ruby_indent_access_modifier_style = 'normal'
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'
" }}}
" Vim-RSpec {{{2
" let g:rspec_command = "clear && spring rspec {spec}"
" let g:rspec_command = "clear && rspec {spec}"
" let g:rspec_runner = "os_x_iterm2"
let g:rspec_command = 'call Send_to_Tmux("spring rspec {spec}\n")'

map <leader>f :call RunCurrentSpecFile()<CR>
map <leader>s :call RunNearestSpec()<CR>
map <leader>l :call RunLastSpec()<CR>
map <leader>a :call RunAllSpecs()<CR>
" }}}
" FZF (Replace for Ctrl-P) {{{2
let g:fzf_files_options = '--preview "(bat --color \"always\" --theme=\"OneHalfDark\" --style=numbers,changes --line-range 0:30 {}) 2> /dev/null | head -'.&lines.'"'
let $FZF_DEFAULT_COMMAND = 'ag -l --nogroup --nocolor -g "" --hidden'
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

let g:fzf_layout = { 'down': '~50%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%', '?'),
  \                 <bang>0)

command! -bang Colors
  \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" Files + devicons
" before install devicon-lookup (https://crates.io/crates/devicon-lookup)
" cargo install devicon-lookup
function! Fzf_files_with_dev_icons(command)
  let l:fzf_files_options = '--preview "bat --color always --style numbers {2..} | head -'.&lines.'"'
   function! s:edit_devicon_prepended_file(item)
    let l:file_path = a:item[4:-1]
    execute 'silent e' l:file_path
  endfunction
   call fzf#run({
        \ 'source': a:command.' | devicon-lookup',
        \ 'sink': function('s:edit_devicon_prepended_file'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down': '40%' })
endfunction
 function! Fzf_git_diff_files_with_dev_icons()
  let l:fzf_files_options = '--ansi --preview "sh -c \"(git diff --color=always -- {3..} | sed 1,4d; bat --color always --style numbers {3..}) | head -'.&lines.'\""'
   function! s:edit_devicon_prepended_file_diff(item)
    echom a:item
    let l:file_path = a:item[7:-1]
    echom l:file_path
    let l:first_diff_line_number = system("git diff -U0 ".l:file_path." | rg '^@@.*\+' -o | rg '[0-9]+' -o | head -1")
     execute 'silent e' l:file_path
    execute l:first_diff_line_number
  endfunction
   call fzf#run({
        \ 'source': 'git -c color.status=always status --short --untracked-files=all | devicon-lookup',
        \ 'sink': function('s:edit_devicon_prepended_file_diff'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down': '40%' })
endfunction

nnoremap <C-p> :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND)<cr>
nnoremap <leader>b :Buffers<CR>
nnoremap <Leader>t :Tags<CR>
nnoremap <leader>o :Lines<cr>

nnoremap <leader>gd :call Fzf_git_diff_files_with_dev_icons()<cr>
nnoremap <leader>gm :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' app/models/')<cr>
nnoremap <leader>gv :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' app/views/')<cr>
nnoremap <leader>gc :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' app/controllers/')<cr>
nnoremap <leader>gy :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' app/assets/stylesheets/')<cr>
nnoremap <leader>gj :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' app/assets/javascripts/')<cr>
nnoremap <leader>gs :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' spec/')<cr>
nnoremap <leader>gw :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . ' app/javascript/')<cr>

let branch_files_options = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD master) ) | sort | uniq'}
let uncommited_files_options = { 'source': '( git status --porcelain | awk ''{print $2}'' ) | sort | uniq'}

let s:diff_options =
  \ '--reverse ' .
  \ '--preview "(git diff --color=always master -- {} | tail -n +5 || bat {}) 2> /dev/null | head -'.&lines.'"'
command! BranchFiles call fzf#run(fzf#wrap('BranchFiles', extend(branch_files_options, { 'options': s:diff_options }), 0))
command! UncommitedFiles call fzf#run(fzf#wrap('UncommitedFiles', extend(uncommited_files_options, { 'options': s:diff_options }), 0))

nnoremap <silent> <leader>gp :BranchFiles<cr>
nnoremap <silent> <leader>GP :UncommitedFiles<cr>
nnoremap <silent> <leader>gb :Gblame<cr>
" }}}
" UltiSnips {{{2
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" }}}
" vim-buftabline {{{2
let g:buftabline_show = 1                                   " Show buffers if > 2 buffers open
let g:buftabline_numbers = 2                                " Show buff numeber
let g:buftabline_indicators = 1                             " Indicate if buffers change
let g:buftabline_separators = 0

" Switch between buffers
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)
"}}}
" vim-vue {{{2
autocmd FileType vue syntax sync fromstart
let g:vue_disable_pre_processors=1
" }}}
" auto-paird {{{2
let g:AutoPairsMultilineClose = 0
" }}}
" vim-signify {{{2
autocmd User Fugitive SignifyRefresh
let g:signify_vcs_list = ['git']
let g:signify_realtime = 0
" }}}
" vim-silicon {{{2
vmap <leader>s :'<,'>Silicon<cr>

let g:silicon = {
      \ 'theme':              'Dracula',
      \ 'font':               'Fira Code',
      \ 'background':         '#aaaacc',
      \ 'shadow-color':       '#555555',
      \ 'line-pad':                   2,
      \ 'pad-horiz':                 30,
      \ 'pad-vert':                  40,
      \ 'shadow-blur-radius':         0,
      \ 'shadow-offset-x':            0,
      \ 'shadow-offset-y':            0,
      \ 'line-number':           v:true,
      \ 'round-corner':          v:true,
      \ 'window-controls':       v:true,
      \ 'default-file-pattern':  '~/Downloads/code-{time:%Y-%m-%d-%H%M%S}.png',
      \ }
"}}}
" Startify: Fancy startup screen for vim {{{2
    " Don't change to directory when selecting a file
    let g:startify_files_number = 5
    let g:startify_change_to_dir = 0
    let g:startify_custom_header = [ ]
    let g:startify_relative_path = 1
    let g:startify_use_env = 1

    function! Listcommits()
      let git = 'git -C ' . getcwd()
      let commits = systemlist(git . ' log --oneline | head -n5')
      let git = 'G' . git[1:]
      return map(commits, '{"line": matchstr(v:val, "\\s\\zs.*"), "cmd": "'. git .' show ". matchstr(v:val, "^\\x\\+") }')
    endfunction

    " Custom startup list, only show MRU from current directory/project
    let g:startify_lists = [
    \  { 'type': 'dir',       'header': [ 'Files '. getcwd() ] },
    \  { 'type': function('Listcommits'), 'header': [ 'Recent Commits' ] },
    \  { 'type': 'sessions',  'header': [ 'Sessions' ]       },
    \  { 'type': 'bookmarks', 'header': [ 'Bookmarks' ]      },
    \  { 'type': 'commands',  'header': [ 'Commands' ]       },
    \ ]

    let g:startify_commands = [
    \   { 'up': [ 'Update Plugins', ':PlugUpdate' ] },
    \   { 'ug': [ 'Upgrade Plugin Manager', ':PlugUpgrade' ] },
    \ ]

    let g:startify_bookmarks = [
        \ { 'c': '~/.vimrc' },
        \ { 'l': '~/.vimrc.local' },
        \ { 'g': '~/.gitconfig' },
        \ { 'z': '~/.zshrc' }
    \ ]

    autocmd User Startified setlocal cursorline
    nmap <leader>st :Startify<cr>
" }}}
" vim-diminactive {{{2
let g:diminactive_use_syntax = 0
let g:diminactive_enable_focus = 1
let g:diminactive_filetype_blacklist = ['startify']
" }}}
" Coc {{{2
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" " Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Use <tab> for select selections ranges, needs server support
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

let g:coc_global_extensions = ['coc-solargraph']

" }}}
" Vista {{{2
" How each level is indented and what to prepend.
" This could make the display more compact or more spacious.
" e.g., more compact: ["▸ ", ""]
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_echo_cursor_strategy="floating_win"
let g:vista_sidebar_width = 61

" To enable fzf's preview window set g:vista_fzf_preview.
" The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
" For example:
let g:vista_fzf_preview = ['right:50%']

" Ensure you have installed some decent font to show these pretty symbols, then you can enable icon for the kind.
let g:vista#renderer#enable_icon = 1

" The default icons can't be suitable for all the filetypes, you can extend it as you wish.
let g:vista#renderer#icons = {
\   "modules": "\uf1b2",
\   "classes": "\ue716",
\   "methods": "\uf794",
\   "singleton methods": "\uf794",
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }

nnoremap <leader>c :Vista finder lcn<cr>
nnoremap <leader>v :Vista!!<cr>
" }}}
" IndentLine {{{2
let g:indentLine_char = '│'
let g:indentLine_bufTypeExclude = ['help', 'terminal']
let g:indentLine_concealcursor = ''
" }}}
" Buffers {{{2
nnoremap <tab> :bnext<CR>
nnoremap <S-tab> :bprevious<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
noremap  <leader>d :Bd<CR>
noremap  <leader>D :bufdo bd<CR>
command! Bd :bp | :sp | :bn | :bd  " Close buffer without closing window
" }}}
" Vaffle {{{2
" Open the parent directory, or the current directory if empty
nnoremap <silent> <leader>q :Vaffle<CR>
" }}}

" }}}

syntax on
filetype on
filetype indent on
filetype plugin indent on
runtime macros/matchit.vim

set t_Co=256

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

" Highlight customization {{{
hi Comment gui=italic cterm=italic
hi htmlArg gui=italic cterm=italic
hi Folded gui=italic cterm=italic
hi String gui=italic cterm=italic

hi HighlightedyankRegion guibg=#DDFFDD guifg=#1F631A

" hi rubyBlockParameter gui=italic cterm=italic
" hi rubyClass gui=italic cterm=italic
" hi rubyDefine gui=italic cterm=italic
" hi rubyFunction gui=italic cterm=italic

highlight DiffAdd    term=bold ctermfg=0 ctermbg=2 guifg=#2b2b2b guibg=#a5c261
highlight DiffDelete term=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2b2b2b guibg=#da4939
highlight DiffChange term=bold ctermfg=0 ctermbg=4 guifg=#2b2b2b guibg=#6d9cbe
highlight DiffText   term=reverse cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#2b2b2b guibg=#6d9cbe
" }}}
