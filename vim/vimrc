" The folding settings above make the {{{ and }}} sections fold up.
" vim:foldmethod=marker:foldlevel=0

set nocompatible

" ===========================================================================
" PLUGINS {{{
" ===========================================================================
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes' | Plug 'ntpeters/vim-airline-colornum'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-ragtag'
Plug 'christoomey/vim-conflicted'
Plug 'Townk/vim-autoclose'
Plug 'terryma/vim-multiple-cursors'
Plug 'powerman/vim-plugin-ruscmd'
Plug 'airblade/vim-gitgutter'
Plug 'mileszs/ack.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'christoomey/vim-tmux-navigator'
Plug 'thoughtbot/vim-rspec'
Plug 'jgdavey/tslime.vim'
Plug 'scrooloose/nerdtree' | Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tommcdo/vim-exchange'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-titlecase'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'sheerun/vim-polyglot'
Plug 'Yggdroot/indentLine'
Plug 'ryanoasis/vim-devicons'
Plug 'wakatime/vim-wakatime'
Plug 'vim-scripts/delimitMate.vim'
Plug 'chrisbra/NrrwRgn'
Plug 'bronson/vim-trailing-whitespace'
Plug 'majutsushi/tagbar'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'p0deje/vim-ruby-interpolation'
Plug 'vim-scripts/LargeFile'
Plug 'vim-scripts/rainbow-end'
Plug 'ap/vim-css-color'
Plug 'blueyed/vim-diminactive' | Plug 'tmux-plugins/vim-tmux-focus-events'

" Linting
Plug 'w0rp/ale'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'fishbullet/deoplete-ruby'

" Colors
Plug 'artanikin/sexy-railscasts-256-theme'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'rakr/vim-one'
Plug 'jacoborus/tender'
Plug 'zcodes/vim-colors-basic'
Plug 'endel/vim-github-colorscheme'
Plug 'antlypls/vim-colors-codeschool'
Plug 'ayu-theme/ayu-vim'
Plug 'rakr/vim-two-firewatch'
Plug 'nanotech/jellybeans.vim'
Plug 'andreypopp/vim-colors-plain'
Plug 'morhetz/gruvbox'

call plug#end()
" }}}

" ===========================================================================
" OPTIONS {{{
" ===========================================================================
" Settings to replace tab. Use :retab for replacing tab in existing files.
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Other general vim options:
set showmatch
set ignorecase
set incsearch
set nopaste
set number
set relativenumber
set undolevels=1000
set cursorline
set history=200
set showcmd                                 " Show entered command
set pastetoggle=<F10>                       " Toggle PASTE mode
set autowrite                               " Autosave closed buffers
set splitbelow                              " Open new split panes to bottom
set splitright                              " Open new split panes to right
set scrolloff=7                             " Minimal number of screen lines to keep above and below the cursor
set hidden                                  " Allow buffer change w/o saving
set lazyredraw                              " Don't update while executing macros
set shell=/bin/zsh
set colorcolumn=0

set list
set listchars=tab:»·,trail:∙

set hlsearch
set incsearch
set ignorecase
set smartcase

" Backupds
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Timeout when switching modes
set timeoutlen=1000
set ttimeoutlen=0

set tags+=.git/tags

set foldmethod=syntax
set foldcolumn=0
let javaScript_fold=1
let ruby_fold=1
set foldlevelstart=99
" }}}

" ===========================================================================
" MAPPINGS {{{
" ===========================================================================
nnoremap <silent> <Space> :nohl<Bar>:echo<CR>
nnoremap n nzz
nnoremap N Nzz

nmap 0 ^

" Leader Shortcuts
let mapleader=','
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>eg :e $MYGVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <silent> <leader>sh :terminal<cr>

nnoremap j gj
nnoremap k gk
nnoremap Y y$

" switch between panels
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Buffers
nnoremap <tab> :bnext<CR>
nnoremap <S-tab> :bprevious<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
noremap  <leader>d :bdelete<CR>
noremap  <leader>D :bufdo bd<CR>

" Switch between last two buffers
nnoremap <leader><leader> <c-^>

" In command mode '%%' insert current directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Tags
" noremap <leader>ct :Ctags -R -f $HOME/.tags --languages=ruby,javascript --exclude=.git --exclude=log . $(bundle list --paths)<CR><CR>

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" }}}

" ===========================================================================
" MENU CONFIGURATION {{{
" ===========================================================================
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,assets/*,.idea/*,*.jpg,*.png,*.gif
" }}}

" ===========================================================================
" AUTOCOMMANDS {{{
" ===========================================================================
if has("autocmd")
  " Have Vim jump to the last position when reopening a file
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Guardfile,config.ru,*.axlsx,*.jb} set filetype=ruby
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set filetype=markdown
  au BufRead,BufNewFile *.json set filetype=javascript
  au BufRead,BufNewFile *.{yaml,yml} set filetype=yaml
  au BufRead,BufNewFile Brewfile set filetype=sh

  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et
  autocmd FileType javascript,html,eruby,sass setlocal ts=4 sts=4 sw=4 et
endif

augroup VimScript
  autocmd!
  if has("gui_running")
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | source $MYGVIMRC | AirlineRefresh
  else
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | AirlineRefresh
  endif
augroup END

augroup ColorColumnOnlyInInsertMode
  autocmd!
  autocmd InsertEnter * let &colorcolumn="159,".join(range(159,999),",")
  autocmd BufRead,BufNewFile,InsertLeave * setlocal colorcolumn=0
augroup END

augroup ConfigGroup
    autocmd!
    autocmd BufWritePost * :call StripTrailingWhitespaces()
augroup END

augroup rails_shortcuts
  autocmd!
  autocmd User Rails nnoremap <Leader>m :Emodel<Space>
  autocmd User Rails nnoremap <Leader>c :Econtroller<Space>
  autocmd User Rails nnoremap <Leader>v :Eview<Space>
augroup END

" Vim AND Tmux Balancing
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Redraw screen every time when focus gained
au FocusGained * :redraw!
" }}}

" ===========================================================================
" ABBREVIATIONS {{{
" ===========================================================================
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Q! q!
cnoreabbrev Qa qa
cnoreabbrev Ц w
cnoreabbrev Цй wq
" }}}

" ===========================================================================
" FUNCTIONS {{{
" ===========================================================================
" strips trailing whitespace at the end of files. this is called on buffer write in the autogroup above.
function! StripTrailingWhitespaces()
  " save last search & cursor position
  let _s=@/
  let l=line(".")
  let c=col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction

" Apidock
function! OpenDoc(type, keyword)
  let url = 'http://apidock.com/'.a:type.'/'.a:keyword
  execute "!open ". url
endfunction

noremap RR :call OpenDoc('rails', expand('<cword>'))<cr>
noremap RB :call OpenDoc('ruby', expand('<cword>'))<cr>
noremap RS :call OpenDoc('rspec', expand('<cword>'))<cr>
" }}}

" ===========================================================================
" PLUGIN OPTIONS {{{
" ===========================================================================

" NERDTree let NERDTreeShowBookmarks=0
let NERDTreeWinPos="left"
let NERDTreeHijackNetrw=1
let NERDTreeChDirMode=2
let NERDTreeDirArrows=1
let g:NERDTreeQuitOnOpen=1                             " close after a file is opened
let NERDTreeShowHidden=0                               " show hidden files in NERDTree
let g:NERDTreeWinSize=50
let NERDTreeAutoDeleteBuffer=1                         " delete buffer when rename or delete file

nmap <silent> <leader>q :NERDTreeToggle<cr>            " toggle NERDTree
nmap <silent> <leader>y :NERDTreeFind<cr>              " expand to the path of the file in the current buffer

" NERDTree syntax highlight
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFoldersFullName = 1

let s:blue = "689FB6"
let s:git_orange = 'F54D27'

let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['yml'] = s:blue " sets the color for .gitignore files

" Airline
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

let g:airline_left_sep          = ''
let g:airline_left_alt_sep      = ''
let g:airline_right_sep         = ''
let g:airline_right_alt_sep     = ''
let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
let g:airline#extensions#readonly#symbol   = '⊘'
let g:airline#extensions#linecolumn#prefix = '¶'
let g:airline#extensions#paste#symbol      = 'ρ'

" Silver Searcher
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
  nnoremap \ :Ag<space>
endif

" Ruby-motion (:help ruby-motion)
let g:ruby_indent_access_modifier_style = 'normal'
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'

" Vim-RSpec
" let g:rspec_command = "clear && spring rspec {spec}"
" let g:rspec_command = "clear && rspec {spec}"
" let g:rspec_runner = "os_x_iterm2"
let g:rspec_command = 'call Send_to_Tmux("spring rspec {spec}\n")'

map <leader>f :call RunCurrentSpecFile()<CR>
map <leader>s :call RunNearestSpec()<CR>
map <leader>l :call RunLastSpec()<CR>
map <leader>a :call RunAllSpecs()<CR>

" ALE async linter
let g:ale_enabled=1
let g:airline#extensions#ale#enabled=1

" disable linting when typing
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

let g:ale_fixers = { 'ruby': ['ruby', 'rubocop'] }
let g:ale_sign_error="E" " •
let g:ale_sign_warning="W"

" Vim-conflicted
set stl+=%{ConflictedVersion()}

" ReplaceWithRegister
  " replace text from system clipboard
nmap <leader>gr "*gr

" FZF (Replace for Ctrl-P)
let g:fzf_files_options =
  \ '--reverse ' .
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
let $FZF_DEFAULT_COMMAND = 'ag -g "" --hidden'

" DeoPlete
let g:deoplete#enable_at_startup = 1

" Disable deoplete when in multi cursor mode
function! Multiple_cursors_before()
    let b:deoplete_disable_auto_complete = 1
endfunction
function! Multiple_cursors_after()
    let b:deoplete_disable_auto_complete = 0
endfunction

nnoremap <C-p> :Files<cr>
nnoremap <leader>b :Buffers<CR>
nnoremap <Leader>t :Tags<CR>

nnoremap <leader>ga :Files app/<cr>
nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>

let branch_files_options = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD master) ) | sort | uniq'}
let uncommited_files_options = { 'source': '( git status --porcelain | awk ''{print $2}'' ) | sort | uniq'}

let s:diff_options =
  \ '--reverse ' .
  \ '--preview "(git diff --color=always master -- {} | tail -n +5 || cat {}) 2> /dev/null | head -'.&lines.'"'
command! BranchFiles call fzf#run(fzf#wrap('BranchFiles',
      \ extend(branch_files_options, { 'options': s:diff_options }), 0))
command! UncommitedFiles call fzf#run(fzf#wrap('UncommitedFiles',
      \ extend(uncommited_files_options, { 'options': s:diff_options }), 0))
nnoremap <silent> <leader>gp :BranchFiles<cr>
nnoremap <silent> <leader>GP :UncommitedFiles<cr>

" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" UltiSnips - Snippet manager
let g:UltiSnipsSnippetsDir='~/.vim/snippets'
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsExpandTrigger           = '<tab>'

nnoremap <leader>ue :UltiSnipsEdit<cr>

" IndentLine
let g:indentLine_char = '│'

" Tagbar
nnoremap <leader>tg :TagbarToggle<cr>
" }}}

syntax on
filetype on
filetype indent on
filetype plugin indent on
runtime macros/matchit.vim

set t_Co=256
set background=dark
colorscheme tomorrow-night
let g:airline_theme='tomorrow'

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
